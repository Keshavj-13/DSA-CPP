========== Question 1 ==========

--- Code ---
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

class SinglyLinkedList {
    Node* head;

public:
    SinglyLinkedList() : head(nullptr) {}

    void insertAtBeginning(int val) {
        Node* newNode = new Node(val);
        newNode->next = head;
        head = newNode;
    }

    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next) temp = temp->next;
        temp->next = newNode;
    }

    void insertBefore(int key, int val) {
        if (!head) return;
        if (head->data == key) {
            insertAtBeginning(val);
            return;
        }
        Node* temp = head;
        while (temp->next && temp->next->data != key) temp = temp->next;
        if (temp->next) {
            Node* newNode = new Node(val);
            newNode->next = temp->next;
            temp->next = newNode;
        }
    }

    void insertAfter(int key, int val) {
        Node* temp = head;
        while (temp && temp->data != key) temp = temp->next;
        if (temp) {
            Node* newNode = new Node(val);
            newNode->next = temp->next;
            temp->next = newNode;
        }
    }

    void deleteAtBeginning() {
        if (!head) return;
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    void deleteAtEnd() {
        if (!head) return;
        if (!head->next) {
            delete head;
            head = nullptr;
            return;
        }
        Node* temp = head;
        while (temp->next->next) temp = temp->next;
        delete temp->next;
        temp->next = nullptr;
    }

    void deleteNode(int key) {
        if (!head) return;
        if (head->data == key) {
            deleteAtBeginning();
            return;
        }
        Node* temp = head;
        while (temp->next && temp->next->data != key) temp = temp->next;
        if (temp->next) {
            Node* del = temp->next;
            temp->next = temp->next->next;
            delete del;
        }
    }

    void search(int key) {
        int pos = 1;
        Node* temp = head;
        while (temp) {
            if (temp->data == key) {
                cout << "Found at position " << pos << endl;
                return;
            }
            pos++;
            temp = temp->next;
        }
        cout << "Not found\n";
    }

    void display() {
        Node* temp = head;
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    SinglyLinkedList list;
    int choice, val, key;

    do {
        cout << "\nMenu:\n";
        cout << "1. Insert at Beginning\n2. Insert at End\n3. Insert Before\n4. Insert After\n";
        cout << "5. Delete at Beginning\n6. Delete at End\n7. Delete Specific\n";
        cout << "8. Search\n9. Display\n0. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
        case 1: cout << "Enter value: "; cin >> val; list.insertAtBeginning(val); break;
        case 2: cout << "Enter value: "; cin >> val; list.insertAtEnd(val); break;
        case 3: cout << "Enter key and value: "; cin >> key >> val; list.insertBefore(key, val); break;
        case 4: cout << "Enter key and value: "; cin >> key >> val; list.insertAfter(key, val); break;
        case 5: list.deleteAtBeginning(); break;
        case 6: list.deleteAtEnd(); break;
        case 7: cout << "Enter key: "; cin >> key; list.deleteNode(key); break;
        case 8: cout << "Enter key: "; cin >> key; list.search(key); break;
        case 9: list.display(); break;
        }
    } while (choice != 0);

    return 0;
}


--- Output ---

PS C:\Users\ASUS\Documents\DSA-CPP> ./a

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 1
Enter value: 1

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 2
Enter value: 5

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 3
Enter key and value: 1
1

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 2
Enter value: 4

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 4
Enter key and value: 4
4

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 5

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 6

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 7
Enter key: 4

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 8
Enter key: 1
Found at position 1

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 9
1 5 

Menu:
1. Insert at Beginning
2. Insert at End
3. Insert Before
4. Insert After
5. Delete at Beginning
6. Delete at End
7. Delete Specific
8. Search
9. Display
0. Exit
Enter choice: 0
PS C:\Users\ASUS\Documents\DSA-CPP> 

========== Question 2 ==========

--- Code ---
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

void countAndDelete(Node*& head, int key) {
    int count = 0;
    Node* temp = head;
    Node* prev = nullptr;

    while (temp) {
        if (temp->data == key) {
            count++;
            if (prev) {
                prev->next = temp->next;
                delete temp;
                temp = prev->next;
            } else {
                head = temp->next;
                delete temp;
                temp = head;
            }
        } else {
            prev = temp;
            temp = temp->next;
        }
    }
    cout << "Count: " << count << endl;
}

void display(Node* head) {
    while (head) {
        cout << head->data;
        if (head->next) cout << "->";
        head = head->next;
    }
    cout << endl;
}

int main() {
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(1);
    head->next->next->next = new Node(2);
    head->next->next->next->next = new Node(1);
    head->next->next->next->next->next = new Node(3);
    head->next->next->next->next->next->next = new Node(1);

    display(head);
    countAndDelete(head, 1);
    display(head);

    return 0;
}


--- Output ---
1->2->1->2->1->3->1
Count: 4
2->2->3


========== Question 3 ==========

--- Code ---
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

int findMiddle(Node* head) {
    Node* slow = head;
    Node* fast = head;
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow->data;
}

int main() {
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);
    head->next->next->next->next = new Node(5);

    cout << "Middle: " << findMiddle(head) << endl;
    return 0;
}


--- Output ---
Middle: 3


========== Question 4 ==========

--- Code ---
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

Node* reverse(Node* head) {
    Node* prev = nullptr;
    Node* curr = head;
    while (curr) {
        Node* next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}

void display(Node* head) {
    while (head) {
        cout << head->data;
        if (head->next) cout << "->";
        head = head->next;
    }
    cout << "->NULL\n";
}

int main() {
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);

    display(head);
    head = reverse(head);
    display(head);

    return 0;
}


--- Output ---
1->2->3->4->NULL
4->3->2->1->NULL


